<templateSet group="user">
  <template name="//test" value="import {expect} from 'chai';&#10;import sinon from 'sinon';&#10;import {$NAME$}&#10;&#10;describe('$NAME$', () =&gt; {&#10;    it('$NAME1$', () =&gt; {&#10;        &#10;    })&#10;})" description="Add test sceleton" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME1" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="//test_comp" value="import React from 'react';&#10;import { expect } from 'chai';&#10;import sinon from 'sinon';&#10;import { shallow } from 'enzyme';&#10;import { $COMP$ } from &#10;&#10;const shallowRender = (props = {}) =&gt; shallow(&lt;$COMP$ {...props} /&gt;);&#10;&#10;describe('&lt;$COMP$/&gt;', () =&gt; {&#10;  it('should render with default props', () =&gt; {&#10;    const wrapper = shallowRender();&#10;  });&#10;});" description="Add component test skeleton" toReformat="false" toShortenFQNames="true">
    <variable name="COMP" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="//dline" value="// tslint:disable-next-line" description="Tslint disable next line" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="//ign" value="// @ts-ignore" description="Tsc ignore next line" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="//Icss" value="interface Css {&#10;    [k: string]: string&#10;}" description="Skeleton css interface" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="//rtl" value="import React from 'react';&#10;import Mockdate from 'mockdate';&#10;import { render, fireEvent, cleanup } from '@testing-library/react';&#10;import $NAME$ from './$NAME$';&#10;&#10;&#10;const setup = (props = {}) =&gt; {&#10;  return render(&lt;$NAME$ {...props} /&gt;);&#10;};&#10;&#10;afterEach(cleanup);&#10;&#10;describe('&lt;$NAME$/&gt;', () =&gt; {&#10;  it('should render', () =&gt; {&#10;    const { container } = setup();&#10;    expect(container).toMatchSnapshot();&#10;  });&#10;});&#10;" description="React testing library skeleton" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="// mockdate" value="  beforeAll(() =&gt; {&#10;    Mockdate.set(new Date(2018, 2, 15, 12));&#10;  });&#10;  afterAll(() =&gt; {&#10;    Mockdate.reset();&#10;  });&#10;  " description="Add mock date beforeAll and afterAll" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="//comp" value="import React from 'react';&#10;import { createStyles, makeStyles } from '@material-ui/styles';&#10;import { Theme } from '@comehome/components/theme';&#10;import { t } from '@comehome/components/translate';&#10;&#10;const useStyles = makeStyles((theme: Theme) =&gt; createStyles({}));&#10;&#10;interface $NAME$Props {}&#10;&#10;export const $NAME$ = (props: $NAME$Props) =&gt; {&#10;  return &lt;React.Fragment&gt;&lt;/React.Fragment&gt;;&#10;};&#10;&#10;export default $NAME$;&#10;" description="Insert a component skeleton" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>